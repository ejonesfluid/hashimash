{
  "version": 4,
  "terraform_version": "0.12.18",
  "serial": 915,
  "lineage": "916b6553-b598-5dc6-4171-e8a5497bab77",
  "outputs": {
    "web-ui": {
      "value": "34.73.65.245",
      "type": "string"
    }
  },
  "resources": [
    {
      "module": "module.gcp",
      "mode": "data",
      "type": "google_compute_instance",
      "name": "consul_vm",
      "provider": "provider.google",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allow_stopping_for_update": null,
            "attached_disk": [
              {
                "device_name": "gke-orchestrated-compl-pvc-ff25666d-2f93-11ea-bd02-42010a8e00ed",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/complexity-inc/zones/us-east1-c/disks/gke-orchestrated-compl-pvc-ff25666d-2f93-11ea-bd02-42010a8e00ed"
              }
            ],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/images/gke-11311-gke14-cos-u-73-11647-293-0-v191107-pre",
                    "labels": {
                      "goog-gke-node": "",
                      "goog-gke-volume": ""
                    },
                    "size": 100,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/complexity-inc/zones/us-east1-c/disks/gke-orchestrated-com-orchestrated-com-eee8e25f-5ttr"
              }
            ],
            "can_ip_forward": true,
            "cpu_platform": "Intel Haswell",
            "deletion_protection": false,
            "description": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": null,
            "id": "projects/complexity-inc/zones/https://www.googleapis.com/compute/beta/projects/complexity-inc/zones/us-east1-c/instances/gke-orchestrated-com-orchestrated-com-eee8e25f-5ttr",
            "instance_id": "2554874423605469463",
            "label_fingerprint": "2ixRno2sGuM=",
            "labels": {
              "goog-gke-node": ""
            },
            "machine_type": "e2-medium",
            "metadata": {
              "cluster-location": "us-east1-c",
              "cluster-name": "orchestrated-complexity",
              "cluster-uid": "38f43db36c543b0c1aa52d05a0f6b8cec27fb97b6ef88ed8d947654f69272b7d",
              "configure-sh": "#!/usr/bin/env bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\n### Hardcoded constants\nDEFAULT_CNI_VERSION=\"v0.7.5\"\nDEFAULT_CNI_SHA1=\"52e9d2de8a5f927307d9397308735658ee44ab8d\"\nDEFAULT_NPD_VERSION=\"v0.6.6\"\nDEFAULT_NPD_SHA1=\"f5644e9a1e3e9e945b23ddf182693d2e9d876973\"\nDEFAULT_CRICTL_VERSION=\"v1.12.0\"\nDEFAULT_CRICTL_SHA1=\"82ef8b44849f9da0589c87e9865d4716573eec7f\"\nDEFAULT_MOUNTER_TAR_SHA=\"8003b798cf33c7f91320cd6ee5cec4fa22244571\"\n###\n\n# Use --retry-connrefused opt only if it's supported by curl.\nCURL_RETRY_CONNREFUSED=\"\"\nif curl --help | grep -q -- '--retry-connrefused'; then\n  CURL_RETRY_CONNREFUSED='--retry-connrefused'\nfi\n\nfunction set-broken-motd {\n  cat \u003e /etc/motd \u003c\u003cEOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  (\n    umask 077\n    local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n    curl --fail --retry 5 --retry-delay 3 ${CURL_RETRY_CONNREFUSED} --silent --show-error \\\n      -H \"X-Google-Metadata-Request: True\" \\\n      -o \"${tmp_kube_env}\" \\\n      http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n    # Convert the yaml format file into a shell-style file.\n    eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' \u003c \"${tmp_kube_env}\" \u003e \"${KUBE_HOME}/kube-env\")\n    rm -f \"${tmp_kube_env}\"\n  )\n}\n\nfunction download-kubelet-config {\n  local -r dest=\"$1\"\n  echo \"Downloading Kubelet config file, if it exists\"\n  # Fetch kubelet config file from GCE metadata server.\n  (\n    umask 077\n    local -r tmp_kubelet_config=\"/tmp/kubelet-config.yaml\"\n    if curl --fail --retry 5 --retry-delay 3 ${CURL_RETRY_CONNREFUSED} --silent --show-error \\\n        -H \"X-Google-Metadata-Request: True\" \\\n        -o \"${tmp_kubelet_config}\" \\\n        http://metadata.google.internal/computeMetadata/v1/instance/attributes/kubelet-config; then\n      # only write to the final location if curl succeeds\n      mv \"${tmp_kubelet_config}\" \"${dest}\"\n    elif [[ \"${REQUIRE_METADATA_KUBELET_CONFIG_FILE:-false}\" == \"true\" ]]; then\n      echo \"== Failed to download required Kubelet config file from metadata server ==\"\n      exit 1\n    fi\n  )\n}\n\nfunction download-kube-master-certs {\n  # Fetch kube-env from GCE metadata server.\n  (\n    umask 077\n    local -r tmp_kube_master_certs=\"/tmp/kube-master-certs.yaml\"\n    curl --fail --retry 5 --retry-delay 3 ${CURL_RETRY_CONNREFUSED} --silent --show-error \\\n      -H \"X-Google-Metadata-Request: True\" \\\n      -o \"${tmp_kube_master_certs}\" \\\n      http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-master-certs\n    # Convert the yaml format file into a shell-style file.\n    eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' \u003c \"${tmp_kube_master_certs}\" \u003e \"${KUBE_HOME}/kube-master-certs\")\n    rm -f \"${tmp_kube_master_certs}\"\n  )\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Get default service account credentials of the VM.\nGCE_METADATA_INTERNAL=\"http://metadata.google.internal/computeMetadata/v1/instance\"\nfunction get-credentials {\n  curl \"${GCE_METADATA_INTERNAL}/service-accounts/default/token\" -H \"Metadata-Flavor: Google\" -s | python -c \\\n    'import sys; import json; print(json.loads(sys.stdin.read())[\"access_token\"])'\n}\n\nfunction valid-storage-scope {\n  curl \"${GCE_METADATA_INTERNAL}/service-accounts/default/scopes\" -H \"Metadata-Flavor: Google\" -s | grep -q \"auth/devstorage\"\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      # if the url belongs to GCS API we should use oauth2_token in the headers\n      local curl_headers=\"\"\n      if [[ \"$url\" =~ ^https://storage.googleapis.com.* ]] \u0026\u0026 valid-storage-scope ; then\n        curl_headers=\"Authorization: Bearer $(get-credentials)\"\n      fi\n      if ! curl ${curl_headers:+-H \"${curl_headers}\"} -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 ${CURL_RETRY_CONNREFUSED} \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] \u0026\u0026 ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction is-preloaded {\n  local -r key=$1\n  local -r value=$2\n  grep -qs \"${key},${value}\" \"${KUBE_HOME}/preload_info\"\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction remount-flexvolume-directory {\n  local -r flexvolume_plugin_dir=$1\n  mkdir -p $flexvolume_plugin_dir\n  mount --bind $flexvolume_plugin_dir $flexvolume_plugin_dir\n  mount -o remount,exec $flexvolume_plugin_dir\n}\n\nfunction install-gci-mounter-tools {\n  CONTAINERIZED_MOUNTER_HOME=\"${KUBE_HOME}/containerized_mounter\"\n  local -r mounter_tar_sha=\"${DEFAULT_MOUNTER_TAR_SHA}\"\n  if is-preloaded \"mounter\" \"${mounter_tar_sha}\"; then\n    echo \"mounter is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading gci mounter tools.\"\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}\"\n  chmod a+x \"${CONTAINERIZED_MOUNTER_HOME}\"\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}/rootfs\"\n  download-or-bust \"${mounter_tar_sha}\" \"https://storage.googleapis.com/kubernetes-release/gci-mounter/mounter.tar\"\n  cp \"${KUBE_HOME}/kubernetes/server/bin/mounter\" \"${CONTAINERIZED_MOUNTER_HOME}/mounter\"\n  chmod a+x \"${CONTAINERIZED_MOUNTER_HOME}/mounter\"\n  mv \"${KUBE_HOME}/mounter.tar\" /tmp/mounter.tar\n  tar xf /tmp/mounter.tar -C \"${CONTAINERIZED_MOUNTER_HOME}/rootfs\"\n  rm /tmp/mounter.tar\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}/rootfs/var/lib/kubelet\"\n}\n\n# Install node problem detector binary.\nfunction install-node-problem-detector {\n  if [[ -n \"${NODE_PROBLEM_DETECTOR_VERSION:-}\" ]]; then\n      local -r npd_version=\"${NODE_PROBLEM_DETECTOR_VERSION}\"\n      local -r npd_sha1=\"${NODE_PROBLEM_DETECTOR_TAR_HASH}\"\n  else\n      local -r npd_version=\"${DEFAULT_NPD_VERSION}\"\n      local -r npd_sha1=\"${DEFAULT_NPD_SHA1}\"\n  fi\n  local -r npd_tar=\"node-problem-detector-${npd_version}.tar.gz\"\n\n  if is-preloaded \"${npd_tar}\" \"${npd_sha1}\"; then\n    echo \"${npd_tar} is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading ${npd_tar}.\"\n  local -r npd_release_path=\"${NODE_PROBLEM_DETECTOR_RELEASE_PATH:-https://storage.googleapis.com/kubernetes-release}\"\n  download-or-bust \"${npd_sha1}\" \"${npd_release_path}/node-problem-detector/${npd_tar}\"\n  local -r npd_dir=\"${KUBE_HOME}/node-problem-detector\"\n  mkdir -p \"${npd_dir}\"\n  tar xzf \"${KUBE_HOME}/${npd_tar}\" -C \"${npd_dir}\" --overwrite\n  mv \"${npd_dir}/bin\"/* \"${KUBE_BIN}\"\n  chmod a+x \"${KUBE_BIN}/node-problem-detector\"\n  rmdir \"${npd_dir}/bin\"\n  rm -f \"${KUBE_HOME}/${npd_tar}\"\n}\n\nfunction install-cni-binaries {\n  if [[ -n \"${CNI_VERSION:-}\" ]]; then\n    local -r cni_tar=\"cni-plugins-amd64-${CNI_VERSION}.tgz\"\n    local -r cni_sha1=\"${CNI_SHA1}\"\n  else\n      local -r cni_tar=\"cni-plugins-amd64-${DEFAULT_CNI_VERSION}.tgz\"\n      local -r cni_sha1=\"${DEFAULT_CNI_SHA1}\"\n  fi\n  if is-preloaded \"${cni_tar}\" \"${cni_sha1}\"; then\n    echo \"${cni_tar} is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading cni binaries\"\n  download-or-bust \"${cni_sha1}\" \"${CNI_STORAGE_PATH}/${cni_tar}\"\n  local -r cni_dir=\"${KUBE_HOME}/cni\"\n  mkdir -p \"${cni_dir}/bin\"\n  tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}/bin\" --overwrite\n  mv \"${cni_dir}/bin\"/* \"${KUBE_BIN}\"\n  rmdir \"${cni_dir}/bin\"\n  rm -f \"${KUBE_HOME}/${cni_tar}\"\n}\n\n# Install crictl binary.\nfunction install-crictl {\n  if [[ -n \"${CRICTL_VERSION:-}\" ]]; then\n    local -r crictl_version=\"${CRICTL_VERSION}\"\n    local -r crictl_sha1=\"${CRICTL_TAR_HASH}\"\n  else\n    local -r crictl_version=\"${DEFAULT_CRICTL_VERSION}\"\n    local -r crictl_sha1=\"${DEFAULT_CRICTL_SHA1}\"\n  fi\n  local -r crictl=\"crictl-${crictl_version}-linux-amd64\"\n\n  # Create crictl config file.\n  cat \u003e /etc/crictl.yaml \u003c\u003cEOF\nruntime-endpoint: ${CONTAINER_RUNTIME_ENDPOINT:-unix:///var/run/dockershim.sock}\nEOF\n\n  if is-preloaded \"${crictl}\" \"${crictl_sha1}\"; then\n    echo \"crictl is preloaded\"\n    return\n  fi\n\n  echo \"Downloading crictl\"\n  local -r crictl_path=\"https://storage.googleapis.com/kubernetes-release/crictl\"\n  download-or-bust \"${crictl_sha1}\" \"${crictl_path}/${crictl}\"\n  mv \"${KUBE_HOME}/${crictl}\" \"${KUBE_BIN}/crictl\"\n  chmod a+x \"${KUBE_BIN}/crictl\"\n}\n\nfunction install-exec-auth-plugin {\n  if [[ ! \"${EXEC_AUTH_PLUGIN_URL:-}\" ]]; then\n      return\n  fi\n  local -r plugin_url=\"${EXEC_AUTH_PLUGIN_URL}\"\n  local -r plugin_sha1=\"${EXEC_AUTH_PLUGIN_SHA1}\"\n\n  echo \"Downloading gke-exec-auth-plugin binary\"\n  download-or-bust \"${plugin_sha1}\" \"${plugin_url}\"\n  mv \"${KUBE_HOME}/gke-exec-auth-plugin\" \"${KUBE_BIN}/gke-exec-auth-plugin\"\n  chmod a+x \"${KUBE_BIN}/gke-exec-auth-plugin\"\n\n  if [[ ! \"${EXEC_AUTH_PLUGIN_LICENSE_URL:-}\" ]]; then\n      return\n  fi\n  local -r license_url=\"${EXEC_AUTH_PLUGIN_LICENSE_URL}\"\n  echo \"Downloading gke-exec-auth-plugin license\"\n  download-or-bust \"\" \"${license_url}\"\n  mv \"${KUBE_HOME}/LICENSE\" \"${KUBE_BIN}/gke-exec-auth-plugin-license\"\n}\n\nfunction install-kube-manifests {\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  local dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n\n  if is-preloaded \"${manifests_tar}\" \"${manifests_tar_hash}\"; then\n    echo \"${manifests_tar} is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-k8s.gcr.io}\"\n  if [[ \"${kube_addon_registry}\" != \"k8s.gcr.io\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)k8s.gcr.io@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")k8s.gcr.io@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_BIN}/configure-helper.sh\"\n  if [[ -e \"${dst_dir}/kubernetes/gci-trusty/gke-internal-configure-helper.sh\" ]]; then\n    cp \"${dst_dir}/kubernetes/gci-trusty/gke-internal-configure-helper.sh\" \"${KUBE_BIN}/\"\n  fi\n\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_BIN}/health-monitor.sh\"\n\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n# A helper function for loading a docker image. It keeps trying up to 5 times.\n#\n# $1: Full path of the docker image\nfunction try-load-docker-image {\n  local -r img=$1\n  echo \"Try to load docker image file ${img}\"\n  # Temporarily turn off errexit, because we don't want to exit on first failure.\n  set +e\n  local -r max_attempts=5\n  local -i attempt_num=1\n  until timeout 30 ${LOAD_IMAGE_COMMAND:-docker load -i} \"${img}\"; do\n    if [[ \"${attempt_num}\" == \"${max_attempts}\" ]]; then\n      echo \"Fail to load docker image file ${img} after ${max_attempts} retries. Exit!!\"\n      exit 1\n    else\n      attempt_num=$((attempt_num+1))\n      sleep 5\n    fi\n  done\n  # Re-enable errexit.\n  set -e\n}\n\n# Loads kube-system docker images. It is better to do it before starting kubelet,\n# as kubelet will restart docker daemon, which may interfere with loading images.\nfunction load-docker-images {\n  echo \"Start loading kube-system docker images\"\n  local -r img_dir=\"${KUBE_HOME}/kube-docker-files\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"true\" ]]; then\n    try-load-docker-image \"${img_dir}/kube-apiserver.tar\"\n    try-load-docker-image \"${img_dir}/kube-controller-manager.tar\"\n    try-load-docker-image \"${img_dir}/kube-scheduler.tar\"\n  else\n    try-load-docker-image \"${img_dir}/kube-proxy.tar\"\n  fi\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n\n  if is-preloaded \"${server_binary_tar}\" \"${server_binary_tar_hash}\"; then\n    echo \"${server_binary_tar} is preloaded.\"\n  else\n    echo \"Downloading binary release tar\"\n    download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n    tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n    # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n    local -r src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n    local dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n    mkdir -p \"${dst_dir}\"\n    cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n    if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n      cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n    else\n      cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n      cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n      cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n      cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n    fi\n    load-docker-images\n    mv \"${src_dir}/kubelet\" \"${KUBE_BIN}\"\n    mv \"${src_dir}/kubectl\" \"${KUBE_BIN}\"\n\n    mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n    mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n  fi\n\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]] \u0026\u0026 \\\n     [[ \"${ENABLE_NODE_PROBLEM_DETECTOR:-}\" == \"standalone\" ]]; then\n    install-node-problem-detector\n  fi\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    install-cni-binaries\n  fi\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  install-kube-manifests\n  chmod -R 755 \"${KUBE_BIN}\"\n\n  # Install gci mounter related artifacts to allow mounting storage volumes in GCI\n  install-gci-mounter-tools\n\n  # Remount the Flexvolume directory with the \"exec\" option, if needed.\n  if [[ \"${REMOUNT_VOLUME_PLUGIN_DIR:-}\" == \"true\" \u0026\u0026 -n \"${VOLUME_PLUGIN_DIR:-}\" ]]; then\n    remount-flexvolume-directory \"${VOLUME_PLUGIN_DIR}\"\n  fi\n\n  # Install crictl on each node.\n  install-crictl\n\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    # TODO(awly): include the binary and license in the OS image.\n    install-exec-auth-plugin\n  fi\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n}\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\n# if install fails, message-of-the-day (motd) will warn at login shell\nset-broken-motd\n\nKUBE_HOME=\"/home/kubernetes\"\nKUBE_BIN=\"${KUBE_HOME}/bin\"\n\n# download and source kube-env\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\n\ndownload-kubelet-config \"${KUBE_HOME}/kubelet-config.yaml\"\n\n# master certs\nif [[ \"${KUBERNETES_MASTER:-}\" == \"true\" ]]; then\n  download-kube-master-certs\nfi\n\n# binaries and kube-system manifests\ninstall-kube-binary-config\n\necho \"Done for installing kubernetes files\"\n",
              "created-by": "projects/784296748434/zones/us-east1-c/instanceGroupManagers/gke-orchestrated-com-orchestrated-com-eee8e25f-grp",
              "disable-legacy-endpoints": "true",
              "enable-oslogin": "false",
              "gci-ensure-gke-docker": "true",
              "gci-update-strategy": "update_disabled",
              "google-compute-enable-pcid": "true",
              "instance-template": "projects/784296748434/global/instanceTemplates/gke-orchestrated-com-orchestrated-com-eee8e25f",
              "kube-env": "ALLOCATE_NODE_CIDRS: \"true\"\nAPI_SERVER_TEST_LOG_LEVEL: --v=3\nAUTOSCALER_ENV_VARS: kube_reserved=cpu=70m,memory=1019Mi,ephemeral-storage=41Gi;node_labels=beta.kubernetes.io/fluentd-ds-ready=true,cloud.google.com/gke-nodepool=orchestrated-complexity-nodepool,cloud.google.com/gke-os-distribution=cos,cloud.google.com/gke-preemptible=true\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURERENDQWZTZ0F3SUJBZ0lSQUlrRzlqR1hGQ3lTL1l4S1g4emtGbTh3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa05tTTRPVFZtWW1VdE5qZG1NaTAwTWpNeExUZzROakV0T1RneU9UazJZVGxoT0dRegpNQjRYRFRJd01ERXdOVEEzTVRNeE9Gb1hEVEkxTURFd016QTRNVE14T0Zvd0x6RXRNQ3NHQTFVRUF4TWtObU00Ck9UVm1ZbVV0TmpkbU1pMDBNak14TFRnNE5qRXRPVGd5T1RrMllUbGhPR1F6TUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBOUFGV2p2Q3BwaE5Fa1hGaW4vYmFvVjZsZmJGbWZxdVhRcWwxM2NTZgoxMWU4OW15ZXF1cFI5dEJ4SUVEZ25YYzNxV0FydXNrN09Ud21nMDlIVngvWTZWY2FkNnE3d0dWTnAvK3JUWGd1CmNYVDNFUjc2aHlpbHhJbVNWSzhHWXplQVR4cmpyNkVJSE0rZjFtWVMrUjc0Y2c1U2l0U0t5WlRIMlVBdko3NzkKNHBGRGNSYnkrNXRHZzM0L2JOdy9Pbjd3VDNxejJNaDUwQ0U5SWtLdTh6eWwzOHlDSng1L3E2WmpKaUx1VWNEWApIcEowb2R3THcza1BLRnI5dVNIRUJVYm92VTRUb0p4ODgrUUdhaVUwcytUK1ptMlBpUmw0S29USm9OSzAvVnVLCktmOSsvd1ZMZmRaRFoyRVc0UnZReGgxYUtjVEE1VUxVUStvK3ZPTHBVcXZ3MndJREFRQUJveU13SVRBT0JnTlYKSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQQpQRWxQeExmaGp3WlBPRjdMc3JMSFVEVXFVNUhtT3FNVzQxSi9STjJDWXRCRktwMit4YXNqMTFXbndDYnNxS3dHCnpSMG9WY3dBS20vbGd5R1M0cVQrMmZjTE9NdmcrdkpIZHA3V0h5SXJ5ZHVTeWVsQUk2Yk5ZdVE0cCtRcU90cGUKNGlPMGdTYTdoaW8vZGhtRzFNTkk3NkMzVkZQUC9zVW0zS0xxNlRPOFJVRjR6Z0ROcWZVUHE2VFUzQUpGMzR4egp5VFh4QUFkc0NULyszZmJ5bzVsWjczeTlxNktoT1RROTdqM2YxMFVGVmJRTE1aZ0xHUDg5UC9kZVlVZEF6T0V0CmxjYWw4QXNzQloyUENvSFVzSW1PZU52dEZsbnd3MEY5bDIxeWVNRHZRVjYwQ2JRYktUTXZiaDIyWSsvdFg5dkYKZDVSTnBtbmYrdzc2c1RYdXJNeCtjQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.56.0.0/14\nCLUSTER_NAME: orchestrated-complexity\nCNI_SHA1: 30999453244682d908c96232ca231f7eb868280c\nCNI_STORAGE_PATH: https://storage.googleapis.com/gke-release/cni-plugins/v0.7.5-gke.5\nCNI_VERSION: v0.7.5-gke.5\nCREATE_BOOTSTRAP_KUBECONFIG: \"true\"\nDNS_DOMAIN: cluster.local\nDNS_SERVER_IP: 10.59.240.10\nDOCKER_REGISTRY_MIRROR_URL: https://mirror.gcr.io\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: none\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_METADATA_AGENT: \"\"\nENABLE_METRICS_SERVER: \"true\"\nENABLE_NODE_LOGGING: \"false\"\nENABLE_NODE_PROBLEM_DETECTOR: standalone\nENABLE_NODELOCAL_DNS: \"false\"\nENABLE_SYSCTL_TUNING: \"true\"\nENV_TIMESTAMP: \"2020-01-05T08:13:18+00:00\"\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nFEATURE_GATES: DynamicKubeletConfig=false,NodeLease=false,TaintBasedEvictions=false,RotateKubeletServerCertificate=true,ExperimentalCriticalPodAnnotation=true\nFLUENTD_CONTAINER_RUNTIME_SERVICE: containerd\nHEAPSTER_USE_NEW_STACKDRIVER_RESOURCES: \"true\"\nHEAPSTER_USE_OLD_STACKDRIVER_RESOURCES: \"false\"\nHPA_USE_REST_CLIENTS: \"true\"\nINSTANCE_PREFIX: gke-orchestrated-complexity-38f43db3\nKUBE_ADDON_REGISTRY: k8s.gcr.io\nKUBE_CLUSTER_DNS: 10.59.240.10\nKUBE_DOCKER_REGISTRY: gke.gcr.io\nKUBE_MANIFESTS_TAR_HASH: 5c2bc8721491c7e0525516d253ee082023f3aa90\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.13.11-gke.14/kubernetes-manifests.tar.gz,https://storage.googleapis.com/gke-release-eu/kubernetes/release/v1.13.11-gke.14/kubernetes-manifests.tar.gz,https://storage.googleapis.com/gke-release-asia/kubernetes/release/v1.13.11-gke.14/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: JFm3zndssfV5m4aGGOb_N-HSx3Gg-ruB6BubLRqwliw=\nKUBELET_ARGS: --v=2 --cloud-provider=gce --experimental-check-node-capabilities-before-mount=true\n  --allow-privileged=true --experimental-mounter-path=/home/kubernetes/containerized_mounter/mounter\n  --cert-dir=/var/lib/kubelet/pki/ --cni-bin-dir=/home/kubernetes/bin --kubeconfig=/var/lib/kubelet/kubeconfig\n  --experimental-kernel-memcg-notification=true --max-pods=110 --network-plugin=kubenet\n  --node-labels=beta.kubernetes.io/fluentd-ds-ready=true,cloud.google.com/gke-nodepool=orchestrated-complexity-nodepool,cloud.google.com/gke-os-distribution=cos,cloud.google.com/gke-preemptible=true\n  --volume-plugin-dir=/home/kubernetes/flexvolume --bootstrap-kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig\n  --node-status-max-images=25 --registry-qps=10 --registry-burst=20\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMyekNDQWNPZ0F3SUJBZ0lRRkNndS9XenBnTUx5T2NHMlEwV1ZPekFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRMll6ZzVOV1ppWlMwMk4yWXlMVFF5TXpFdE9EZzJNUzA1T0RJNU9UWmhPV0U0WkRNdwpIaGNOTWpBd01UQTFNRGd4TXpFNVdoY05NalV3TVRBek1EZ3hNekU1V2pBU01SQXdEZ1lEVlFRREV3ZHJkV0psCmJHVjBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTRyVTBtUjh0WUd0K0x5UDgKclIzeGQyalVmSHNkcldRRGcyRERXdXBsdXlZakc4bW1sZ0crb2pBdytzVXV5enhWYW9JKzYzUU9aZXBRNmErRgpjUUQ2SGJRSVd4czRpVUNTMk1DYXBkb01JWXVnMytUNFl6VWswOVQvRU9pZlNHblZMeTlVSTMvRmpsNVlvVXJvCktTSkhWSjR4OGdwM2pZeExIUmdxSGNsQk1LbGVOZ3Y4dmRpWWZwZVF1R01EOVc4TVFIWEd3SVN0dXRXVWZzNTEKTmZxOFF5OFZ0RmxGTDFMbm5XSWo1OCtsM2k0eUJQQ3VVMG5WUks3NjBGU09CbkxsdlExZUtIYWtUQ2lEOG96UwpST0Z1N1pjUVpadTRRZEhIY2ZLZGR1RHR0RXBwZVA1ZlIxVHpLbWZ1UXBlQTBmRGJZb3FnczRyMUkreThUd1NPCkVsaXJ5UUlEQVFBQm94QXdEakFNQmdOVkhSTUJBZjhFQWpBQU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQUsKaGxaMXJ0QVgzNUR2UkVHMTlBcDNGTDdmVDM0bkJRNWNYT3hHRnFkRTBoVkpCbzhiUHcxVElITWNEazh1anIyNwp4K3E3UE11UnlZdmNNdFM0aTIyYnJ4elIzQnJsSHNCQ0NVTkxwQ011ZEhtck5MTkV4eDBuK0ZvV0lVS2hVUURMCkg3UkF0c1dDdktrOHY1ODRjWUFFWWRZc21LWkxFMnl1eTd6WWJFSnozUHExNk5BcGFGZ2xwSTNLZ0M4aUVROUMKRkpNUHBaWHA2cGc2ZGVkTXRrY2pXOUJVbEhwc2psV213VWJMUHM1MkhnOWdON216VTd3akF1YXFGVWg4SDR3TgpBcVdIQStEWnJiWktaOW5ydjB2bzNiZzdGVHJWZWtZbFNsaFZsZVJqa3V2eWx2ZW52WkpFWVNXVVl4aTdVQUM3CmxwNDlRM3BvWW1aTjl6ZTh0N0dXCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNHJVMG1SOHRZR3QrTHlQOHJSM3hkMmpVZkhzZHJXUURnMkREV3VwbHV5WWpHOG1tCmxnRytvakF3K3NVdXl6eFZhb0krNjNRT1plcFE2YStGY1FENkhiUUlXeHM0aVVDUzJNQ2FwZG9NSVl1ZzMrVDQKWXpVazA5VC9FT2lmU0duVkx5OVVJMy9Gamw1WW9Vcm9LU0pIVko0eDhncDNqWXhMSFJncUhjbEJNS2xlTmd2OAp2ZGlZZnBlUXVHTUQ5VzhNUUhYR3dJU3R1dFdVZnM1MU5mcThReThWdEZsRkwxTG5uV0lqNTgrbDNpNHlCUEN1ClUwblZSSzc2MEZTT0JuTGx2UTFlS0hha1RDaUQ4b3pTUk9GdTdaY1FaWnU0UWRISGNmS2RkdUR0dEVwcGVQNWYKUjFUekttZnVRcGVBMGZEYllvcWdzNHIxSSt5OFR3U09FbGlyeVFJREFRQUJBb0lCQUY3YzBoQ01nakZKYVhpUwpSMld0Rk9BUlpuQmNGL1A0Mkp0OXZ1RHBHZjV3bTlwQnk4b1RHdERFOTRuSFBxaGVLNk93c21GVm83eXppbjN1Ckt4azQvbSsxYUpXdTB6NWpYYzhDOFBNYlJWNDREZTRCNG9tb3NDdFBnaGR5TDB4ZXRJelU4aEVVb3ZiS3RhMXcKS2Fza285SmRpNnFyQkpHZk5jTUwzSHV3UGUzODkwa1hwS1hDZUlHYXpLaE9xQXlZMEtqbmtmRm5jR1ZqWERiYQp6MnRTSVFQWVVBR1Zsd2ZSS0ltYmdlaEV4UDVlak1MbVNFcERNbzk2SVlzNURSYzFiMTllczZtbFlvb3VjeHF1CnhSZWxmYVg2bGt2OFAvYmtJUVVsOXMzWUQ4Vm5rcEFxRUZPaStQYU1NQUFOYndTZlpOVkQ5c1VoajFZWXZSVkkKQndwejJtMENnWUVBOFRmcWRyVkVDNXJCWEhoU3RQMWZoZG96aktaYlFzdXhKSkFjWWtSeWZSZ1FTSmpITXRhTwprMFNqc3IvOW9qcStjL0hJaDFnYi90N3dwNE1yUzZ1REhCb0h3NmJzMThZRUdqNFJoNkFITG9xMkM5Q3Z0YjVDCitjckN5ZlFVWTJrNDFTbkhTVG93U0FVOGtZcUtHQzJrRXpsNmt6Mm5tQ2VSTFpCUXRtS0xUZThDZ1lFQThKbW8KRXh6eTJqUWlzY3g3TmxKVlpaUlRidWNKMjI5QzVIaXQ3VFdTVTE3QUd5UlA2RHRTWThMazlyVWFUY1NuendPYQpuQmlMQ3NWbmlSczdGaWpwNGVIWTUvblFIREhrVXVxZUpzUEl0NW9oeXVBVmhpaHg4dTkxMTBQMi9iZ1FTRE9tCjE4bkVvYVY3RDY2eHhnTWg5MXpNNmN5TnB2RlNuTjV6V2d4NVdjY0NnWUVBM3R2L1ZqOXdwNXdLQzZuckYrYUQKeTRIbVlJc09BKzkzTVVXbnc2NWpiR25BR2FKMVgrWFZBZ0RIa1ExS2d3anREdWdTa2VENHRJZzdKVGpOMW5LVwpobThTUDFSSXU2M3ArbWpmLzBMOWY2V09QZXBIZkkxVkNiMm9LN2ZDNG5uRGxVV3RKbDJKWC9EZW5jUzJnMUlmCnBkZFVCUmRRY1FZVlhsaFlDYm1QNUtjQ2dZQWdlNTVGZGxNVFFwYXNpbjdZQnFXZzRUV2ljMjdSUVdRMmxGUm4KQWlTUFBPdVN2b1JMUmpjSllQYW9tQ3JFOVJmeXl2bkV1VXVNV0xweHVFdHg0blF4R3R5OTlPd3o0a2lCS1V2UQp6LzM1UzhYa0xmeTU4QnZ5UUlJWVhnU3FuSDhXUUdMMkh6ZDgyMnFSNDNQODE4OXVKZ2xFUjJtWWNGeEc4WUdCClZzM0xZUUtCZ1FEV0ZCdHo0VS91NW5YRERRK0RZQUxiUlVLR01uUlA2NFFXUDQrTVZlajdxZkRXekZNRnZHanMKcFlDdHZRKzJuMFVLei9GSjlGMlFOVUVDNzloaFRtZ25hQVdSMjVscjJYWVJJVTMxeXhTOUIraEtiUUMvNlJpWgoyd3JRLzFTYUdUYkN2ZlNSRjJxd09PWWZpVi9veUVFWVlxb1RGYTY3aGdvcEdPbkFDUWFkQnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 35.231.216.0\nLOGGING_DESTINATION: \"\"\nLOGGING_STACKDRIVER_RESOURCE_TYPES: \"\"\nMONITORING_FLAG_SET: \"true\"\nNETWORK_PROVIDER: kubenet\nNODE_LOCAL_SSDS_EXT: \"\"\nNODE_PROBLEM_DETECTOR_TOKEN: yuIGcAsuW034UMIJPXd7XvjZ8Dop3SWEAsW1t_5520c=\nREMOUNT_VOLUME_PLUGIN_DIR: \"true\"\nREQUIRE_METADATA_KUBELET_CONFIG_FILE: \"true\"\nSALT_TAR_HASH: \"\"\nSALT_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.13.11-gke.14/kubernetes-salt.tar.gz,https://storage.googleapis.com/gke-release-eu/kubernetes/release/v1.13.11-gke.14/kubernetes-salt.tar.gz,https://storage.googleapis.com/gke-release-asia/kubernetes/release/v1.13.11-gke.14/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 98ae5929be9c9e9537a1874fe4714feb045b3fcc\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.13.11-gke.14/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/gke-release-eu/kubernetes/release/v1.13.11-gke.14/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/gke-release-asia/kubernetes/release/v1.13.11-gke.14/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.59.240.0/20\nSYSCTL_OVERRIDES: \"\"\nVOLUME_PLUGIN_DIR: /home/kubernetes/flexvolume\nZONE: us-east1-c\n",
              "kube-labels": "beta.kubernetes.io/fluentd-ds-ready=true,cloud.google.com/gke-nodepool=orchestrated-complexity-nodepool,cloud.google.com/gke-os-distribution=cos,cloud.google.com/gke-preemptible=true",
              "kubelet-config": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    enabled: true\n  x509:\n    clientCAFile: /etc/srv/kubernetes/pki/ca-certificates.crt\nauthorization:\n  mode: Webhook\ncgroupRoot: /\nclusterDNS:\n- 10.59.240.10\nclusterDomain: cluster.local\nconfigMapAndSecretChangeDetectionStrategy: Cache\nenableDebuggingHandlers: true\nevictionHard:\n  memory.available: 100Mi\n  nodefs.available: 10%\n  nodefs.inodesFree: 5%\nfeatureGates:\n  DynamicKubeletConfig: false\n  ExperimentalCriticalPodAnnotation: true\n  NodeLease: false\n  RotateKubeletServerCertificate: true\n  TaintBasedEvictions: false\nkind: KubeletConfiguration\nkubeReserved:\n  cpu: 70m\n  ephemeral-storage: 41Gi\n  memory: 1019Mi\nreadOnlyPort: 10255\nserverTLSBootstrap: true\nstaticPodPath: /etc/kubernetes/manifests\n",
              "user-data": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      # Use --retry-connrefused opt only if it's supported by curl.\n      ExecStartPre=/bin/bash -c 'OPT=\"\"; if curl --help | grep -q -- \"--retry-connrefused\"; then OPT=\"--retry-connrefused\"; fi; /usr/bin/curl --fail --retry 5 --retry-delay 3 $OPT --silent --show-error -H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh'\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-container-runtime-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for container runtime\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh container-runtime\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\n      [Install]\n      WantedBy=multi-user.target\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-container-runtime-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl enable kubernetes.target\n - systemctl start kubernetes.target\n"
            },
            "metadata_fingerprint": "R59lCXWaISc=",
            "metadata_startup_script": null,
            "min_cpu_platform": "",
            "name": "gke-orchestrated-com-orchestrated-com-eee8e25f-5ttr",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "34.74.178.193",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/complexity-inc/global/networks/default",
                "network_ip": "10.142.0.21",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/complexity-inc/regions/us-east1/subnetworks/default",
                "subnetwork_project": "complexity-inc"
              }
            ],
            "project": "complexity-inc",
            "scheduling": [
              {
                "automatic_restart": false,
                "node_affinities": [],
                "on_host_maintenance": "TERMINATE",
                "preemptible": true
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/complexity-inc/zones/us-east1-c/instances/gke-orchestrated-com-orchestrated-com-eee8e25f-5ttr",
            "service_account": [
              {
                "email": "784296748434-compute@developer.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/devstorage.read_only",
                  "https://www.googleapis.com/auth/logging.write",
                  "https://www.googleapis.com/auth/monitoring"
                ]
              }
            ],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": [
              "gke-orchestrated-complexity-38f43db3-node",
              "orchestrated-complexity"
            ],
            "tags_fingerprint": "BD7mSbzbgVA=",
            "zone": "us-east1-c"
          }
        }
      ]
    },
    {
      "module": "module.gcp",
      "mode": "data",
      "type": "google_compute_instance_group",
      "name": "k8s_instance_group",
      "provider": "provider.google",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "description": "This instance group is controlled by Instance Group Manager 'gke-orchestrated-com-orchestrated-com-eee8e25f-grp'. To modify instances in this group, use the Instance Group Manager API: https://cloud.google.com/compute/docs/reference/latest/instanceGroupManagers",
            "id": "projects/complexity-inc/zones/us-east1-c/instanceGroups/gke-orchestrated-com-orchestrated-com-eee8e25f-grp",
            "instances": [
              "https://www.googleapis.com/compute/v1/projects/complexity-inc/zones/us-east1-c/instances/gke-orchestrated-com-orchestrated-com-eee8e25f-5ttr"
            ],
            "name": "gke-orchestrated-com-orchestrated-com-eee8e25f-grp",
            "named_port": [],
            "network": "https://www.googleapis.com/compute/v1/projects/complexity-inc/global/networks/default",
            "project": "complexity-inc",
            "self_link": "https://www.googleapis.com/compute/v1/projects/complexity-inc/zones/us-east1-c/instanceGroups/gke-orchestrated-com-orchestrated-com-eee8e25f-grp",
            "size": 1,
            "zone": "us-east1-c"
          }
        }
      ]
    },
    {
      "module": "module.gcp",
      "mode": "data",
      "type": "google_container_cluster",
      "name": "cluster",
      "provider": "provider.google",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "additional_zones": [],
            "addons_config": [
              {
                "horizontal_pod_autoscaling": [],
                "http_load_balancing": [],
                "kubernetes_dashboard": [],
                "network_policy_config": [
                  {
                    "disabled": true
                  }
                ]
              }
            ],
            "authenticator_groups_config": [],
            "cluster_autoscaling": [
              {
                "auto_provisioning_defaults": [],
                "enabled": false,
                "resource_limits": []
              }
            ],
            "cluster_ipv4_cidr": "10.56.0.0/14",
            "default_max_pods_per_node": 110,
            "description": "",
            "enable_binary_authorization": null,
            "enable_intranode_visibility": null,
            "enable_kubernetes_alpha": false,
            "enable_legacy_abac": true,
            "enable_tpu": null,
            "endpoint": "35.231.216.0",
            "id": "projects/complexity-inc/locations/us-east1-c/clusters/orchestrated-complexity",
            "initial_node_count": 1,
            "instance_group_urls": [
              "https://www.googleapis.com/compute/v1/projects/complexity-inc/zones/us-east1-c/instanceGroups/gke-orchestrated-com-orchestrated-com-eee8e25f-grp"
            ],
            "ip_allocation_policy": [],
            "location": "us-east1-c",
            "logging_service": "logging.googleapis.com/kubernetes",
            "maintenance_policy": [],
            "master_auth": [
              {
                "client_certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMyakNDQWNLZ0F3SUJBZ0lRTHNGOEFSM1RYYTZNc2I3QWtuenkyREFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRMll6ZzVOV1ppWlMwMk4yWXlMVFF5TXpFdE9EZzJNUzA1T0RJNU9UWmhPV0U0WkRNdwpIaGNOTWpBd01UQTFNRGd4TXpFNVdoY05NalV3TVRBek1EZ3hNekU1V2pBUk1ROHdEUVlEVlFRREV3WmpiR2xsCmJuUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEQitMQWVWM0FLTmk4QUduRXUKZTdVRmVOVm14ZVo4WmJ5dWRZMFEraWFsUVRua1pQa2x0UTlWcUdDV2IvSFdZZ3NHMm4xMGRLVzJrRFpGMjUydQpwRkh3YWpiWFdURTZDR1ZBam4vNzVqYXBRRW5JbTkwNXNrRXE0Tjdqc2RwSEhvY3NqeGVvdGpvbEJnejhWVTc3CkZaMDZlT3BPeDVuZ1U4elhoTE5mUytvTGpWTEtkbndJRktZODdsMEQ5NTNJcVpHN3VnRjdLaHNwQ1lHbXJGbXoKZGFETCs1Q3FOY2krN2k4Z0FteW1IWEkyRklvdW5UNXlxcmFJUHQ3ZHpvMm1VZVNhZ0F6aUtWRGlTMHFnSmdrbgpTNzhZN1A3MjZCKzNIVkMrbG1mL3JsdzhYZUoxdCtmQlIxbnVFSTRsZE1aVmFpN1dQQWFaaWRiZEc3cmtLaE9YClNMMGxBZ01CQUFHakVEQU9NQXdHQTFVZEV3RUIvd1FDTUFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCTTMKNnAzVGR5R0NOTVBxaFRPTkpLVGlwWmRVS2RGeHJqOUVzdW1sWFVwdi9jNUNNd1gxdVhJMW9yZWJqckJjV2ZmWQo1THd3WFFlcDhpRStKMHNHZWpleVZzaGhWM29yREN3YTZaWTcyZVBRRGtQeGNGZ1ZPNEg4REZVNXRtWkx6RTNZCklkeUU2KzN0UUN4NktpRFFVbWhkdlBGano4NEtmUnduOWROQk5sczU4b1R3ZUtxMjAyR0VMNHJSR3ErRnVpcU4KUnR6WnQ1Q3dQWG9XalpsOGVtdHZvdVF3VU5GbmR4SmtBd0pUdy9RaHVUTzJaT0NOeWVRLy95YUZEc1hURXJoUAp2RlRvWnZ0akVPN2I5dnNQN1FZalJlNUlYalZjaVlvdDZIblZpMENsZm5qd2dPWW5kU1lKSHJFc1V2Y1hSL0I0CnpaYTE5VWh0M0h2TUlOL1JOSDg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                "client_certificate_config": [
                  {
                    "issue_client_certificate": true
                  }
                ],
                "client_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBd2Zpd0hsZHdDall2QUJweExudTFCWGpWWnNYbWZHVzhybldORVBvbXBVRTU1R1Q1CkpiVVBWYWhnbG0veDFtSUxCdHA5ZEhTbHRwQTJSZHVkcnFSUjhHbzIxMWt4T2dobFFJNS8rK1kycVVCSnlKdmQKT2JKQkt1RGU0N0hhUng2SExJOFhxTFk2SlFZTS9GVk8reFdkT25qcVRzZVo0RlBNMTRTelgwdnFDNDFTeW5aOApDQlNtUE81ZEEvZWR5S21SdTdvQmV5b2JLUW1CcHF4WnMzV2d5L3VRcWpYSXZ1NHZJQUpzcGgxeU5oU0tMcDArCmNxcTJpRDdlM2M2TnBsSGttb0FNNGlsUTRrdEtvQ1lKSjB1L0dPeis5dWdmdHgxUXZwWm4vNjVjUEYzaWRiZm4Kd1VkWjdoQ09KWFRHVldvdTFqd0dtWW5XM1J1NjVDb1RsMGk5SlFJREFRQUJBb0lCQUF5Rkp2MEx0aDE2bjRXdQpyei9mQXB3SlQzWkptaXNpWXFUbmQ5cGJneWk4aHBEc1J1YW5yVnlMNHp3aW1xWUtBRjNmWVhuN0E0S1VCQTkxCjhhakcrTXVxQWhpR3JIWkFwTThmYmptNHJpNDJOTzBBSG9ORENHWWlTMURBSWUrSzZXZTNaQmE0T0dybVhUL2cKL203czEyVmhvNklWSVNTejFBVFVqeGdTR0MwZTdtTnRWZW93YWxPRCtMc2ptcGF2RXJLUEhvVndYTHg4MkFhTQpKSjIwQkxXL3RPdndOQWxoMkZMaFo2NHB6THZTQW8yS04vUkNWQVhhNjM2c1dvbW5NWk5TVHAyNy9iSGhxc0dvCmtxa2tWNERNK01HTVlPU1lTZnVVbEdGaXk0Unc0QmJNNWRCTmJoRTdvVUo2Lzc3UmxyZzB5OENJbEVSK3cybmoKOEJqbVJzc0NnWUVBOVI2ZHcvdkM5Ylp5b1drMGlpV2I5M3UxZGJ2WWFrRUdpUTdzc1JyL1FWSFVsNW1YRzExMwpEM3lZa0pSem9xdUlOVE41NmhiWDc0d29OYjh4bG1wM0JUUXpZZTEwYU5rcS94c3pVTkVlZ0ZFSVlKMkVQbHhnCkZPM2d5eFl4czBwbWozQTV1TDZ3c05XVWtvWkZaY3BZMzA2OC91MXFkaFNRaU1TMStobWFVNnNDZ1lFQXlwVGIKUUFVVHpKYnRGbmNXTkVUUk9SOEpYMUxtQ2lOKzQrNjdrRkVzcXVxZWprQ2lFVm5Pa2Iyc3FFMVRMUDVTOEViSgo5STk5QnR3eSsxNGEreXJEejhqOXBVRXZPaUFrTGhGZW43NU1IRTZ3QzU5dVoySHpNTW50ZTdYSXZJOE9jTFJ3CnVMeCtpQ3lheHRxUlNvdkdDMk4vVUozWndSK0JmUHZySGxVRlltOENnWUErMFBESFY4NlhuNER5NG40blpRbjYKTzBhK2ZEd3l4cVZCSElVRndoQm1FZTEwU0ZVVUd6aTJ6RXhneU5wMWRwWDZaRTI2OHMyMXd1cFBFOGRHYjlRKwpqaWtZMEh5RG5odkpzcFBOQXpwWTBldGVyeDlEeC9LTGlvYVFKUWpwbElpQis5V2ZCYWRNT2YvUUtQN0Iza0EyClFmeG5MRHFiTmh2d0lORXQzYi9SN3dLQmdRREpleVZZMWZQc0xrdWRaVkdyS0txaVVqRURJckx5Y0gwNmUyMEcKeXdWTzlFeEFGUjViZldPSzVnZTcyRFFhY3RQUWI4ZGF1ZjlTZkYwa1RtTXRYVW9rOWJUMzBBNEZsSVFIWVhVbwpFWjhuSkVmSk40Y1p3WHliRUtwbXVOVHVYS1d6Q0hOMytOa3IzSmtQbjhDVFVOTG03czFvUTZhWWdocEtVVTkxCituK0Jkd0tCZ0FLSDUwMGgwVTVSdFBDZFh2ZmliT3VneWgwQmlpQ1VxOWhtdko2T1VhMDhEZXEzQktmaEVRKzcKSkRRZE9qdTJLdVRCc2RiN29LNmoyaEdaV2c5YzVRdzVDWDhWLzVGeTNMbmx5Skc1dW00bTFBY0J6ME5GaDZrTQpkWlAyMUZxNlRneXltWUUvWjQ3TDNXVTN4ZnB3WnlxbnR6SlY4dndxeUxoZTNGUEcxYnhSCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
                "cluster_ca_certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURERENDQWZTZ0F3SUJBZ0lSQUlrRzlqR1hGQ3lTL1l4S1g4emtGbTh3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa05tTTRPVFZtWW1VdE5qZG1NaTAwTWpNeExUZzROakV0T1RneU9UazJZVGxoT0dRegpNQjRYRFRJd01ERXdOVEEzTVRNeE9Gb1hEVEkxTURFd016QTRNVE14T0Zvd0x6RXRNQ3NHQTFVRUF4TWtObU00Ck9UVm1ZbVV0TmpkbU1pMDBNak14TFRnNE5qRXRPVGd5T1RrMllUbGhPR1F6TUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBOUFGV2p2Q3BwaE5Fa1hGaW4vYmFvVjZsZmJGbWZxdVhRcWwxM2NTZgoxMWU4OW15ZXF1cFI5dEJ4SUVEZ25YYzNxV0FydXNrN09Ud21nMDlIVngvWTZWY2FkNnE3d0dWTnAvK3JUWGd1CmNYVDNFUjc2aHlpbHhJbVNWSzhHWXplQVR4cmpyNkVJSE0rZjFtWVMrUjc0Y2c1U2l0U0t5WlRIMlVBdko3NzkKNHBGRGNSYnkrNXRHZzM0L2JOdy9Pbjd3VDNxejJNaDUwQ0U5SWtLdTh6eWwzOHlDSng1L3E2WmpKaUx1VWNEWApIcEowb2R3THcza1BLRnI5dVNIRUJVYm92VTRUb0p4ODgrUUdhaVUwcytUK1ptMlBpUmw0S29USm9OSzAvVnVLCktmOSsvd1ZMZmRaRFoyRVc0UnZReGgxYUtjVEE1VUxVUStvK3ZPTHBVcXZ3MndJREFRQUJveU13SVRBT0JnTlYKSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQQpQRWxQeExmaGp3WlBPRjdMc3JMSFVEVXFVNUhtT3FNVzQxSi9STjJDWXRCRktwMit4YXNqMTFXbndDYnNxS3dHCnpSMG9WY3dBS20vbGd5R1M0cVQrMmZjTE9NdmcrdkpIZHA3V0h5SXJ5ZHVTeWVsQUk2Yk5ZdVE0cCtRcU90cGUKNGlPMGdTYTdoaW8vZGhtRzFNTkk3NkMzVkZQUC9zVW0zS0xxNlRPOFJVRjR6Z0ROcWZVUHE2VFUzQUpGMzR4egp5VFh4QUFkc0NULyszZmJ5bzVsWjczeTlxNktoT1RROTdqM2YxMFVGVmJRTE1aZ0xHUDg5UC9kZVlVZEF6T0V0CmxjYWw4QXNzQloyUENvSFVzSW1PZU52dEZsbnd3MEY5bDIxeWVNRHZRVjYwQ2JRYktUTXZiaDIyWSsvdFg5dkYKZDVSTnBtbmYrdzc2c1RYdXJNeCtjQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                "password": "Password1234!12312",
                "username": "kubernetes"
              }
            ],
            "master_authorized_networks_config": [],
            "master_version": "1.13.11-gke.14",
            "min_master_version": null,
            "monitoring_service": "monitoring.googleapis.com/kubernetes",
            "name": "orchestrated-complexity",
            "network": "projects/complexity-inc/global/networks/default",
            "network_policy": [
              {
                "enabled": false,
                "provider": "PROVIDER_UNSPECIFIED"
              }
            ],
            "node_config": [
              {
                "disk_size_gb": 100,
                "disk_type": "pd-standard",
                "guest_accelerator": [],
                "image_type": "COS",
                "labels": {},
                "local_ssd_count": 0,
                "machine_type": "e2-medium",
                "metadata": {
                  "disable-legacy-endpoints": "true"
                },
                "min_cpu_platform": "",
                "oauth_scopes": [
                  "https://www.googleapis.com/auth/devstorage.read_only",
                  "https://www.googleapis.com/auth/logging.write",
                  "https://www.googleapis.com/auth/monitoring"
                ],
                "preemptible": true,
                "sandbox_config": [],
                "service_account": "default",
                "shielded_instance_config": [
                  {
                    "enable_integrity_monitoring": true,
                    "enable_secure_boot": false
                  }
                ],
                "tags": [
                  "orchestrated-complexity"
                ],
                "taint": [],
                "workload_metadata_config": []
              }
            ],
            "node_locations": [],
            "node_pool": [
              {
                "autoscaling": [],
                "initial_node_count": 1,
                "instance_group_urls": [
                  "https://www.googleapis.com/compute/v1/projects/complexity-inc/zones/us-east1-c/instanceGroupManagers/gke-orchestrated-com-orchestrated-com-eee8e25f-grp"
                ],
                "management": [
                  {
                    "auto_repair": false,
                    "auto_upgrade": false
                  }
                ],
                "max_pods_per_node": 0,
                "name": "orchestrated-complexity-nodepool",
                "name_prefix": "",
                "node_config": [
                  {
                    "disk_size_gb": 100,
                    "disk_type": "pd-standard",
                    "guest_accelerator": [],
                    "image_type": "COS",
                    "labels": {},
                    "local_ssd_count": 0,
                    "machine_type": "e2-medium",
                    "metadata": {
                      "disable-legacy-endpoints": "true"
                    },
                    "min_cpu_platform": "",
                    "oauth_scopes": [
                      "https://www.googleapis.com/auth/devstorage.read_only",
                      "https://www.googleapis.com/auth/logging.write",
                      "https://www.googleapis.com/auth/monitoring"
                    ],
                    "preemptible": true,
                    "sandbox_config": [],
                    "service_account": "default",
                    "shielded_instance_config": [
                      {
                        "enable_integrity_monitoring": true,
                        "enable_secure_boot": false
                      }
                    ],
                    "tags": [
                      "orchestrated-complexity"
                    ],
                    "taint": [],
                    "workload_metadata_config": []
                  }
                ],
                "node_count": 1,
                "version": "1.13.11-gke.14"
              }
            ],
            "node_version": "1.13.11-gke.14",
            "pod_security_policy_config": null,
            "private_cluster_config": [],
            "project": "complexity-inc",
            "region": null,
            "remove_default_node_pool": null,
            "resource_labels": {},
            "services_ipv4_cidr": "10.59.240.0/20",
            "subnetwork": "projects/complexity-inc/regions/us-east1/subnetworks/default",
            "vertical_pod_autoscaling": [],
            "zone": null
          }
        }
      ]
    },
    {
      "module": "module.gcp",
      "mode": "managed",
      "type": "google_compute_firewall",
      "name": "consul",
      "provider": "provider.google",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "allow": [
              {
                "ports": [
                  "80",
                  "8600",
                  "8300",
                  "8301",
                  "8302"
                ],
                "protocol": "udp"
              },
              {
                "ports": [
                  "80",
                  "8600",
                  "8500",
                  "8300",
                  "8301",
                  "8302"
                ],
                "protocol": "tcp"
              }
            ],
            "creation_timestamp": "2020-01-05T00:13:18.984-08:00",
            "deny": [],
            "description": "",
            "destination_ranges": [],
            "direction": "INGRESS",
            "disabled": false,
            "enable_logging": false,
            "id": "projects/complexity-inc/global/firewalls/consul-firewall",
            "name": "consul-firewall",
            "network": "https://www.googleapis.com/compute/v1/projects/complexity-inc/global/networks/default",
            "priority": 1000,
            "project": "complexity-inc",
            "self_link": "https://www.googleapis.com/compute/v1/projects/complexity-inc/global/firewalls/consul-firewall",
            "source_ranges": [
              "0.0.0.0/0"
            ],
            "source_service_accounts": [],
            "source_tags": [],
            "target_service_accounts": [],
            "target_tags": [
              "orchestrated-complexity"
            ],
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAsImRlbGV0ZSI6MjQwMDAwMDAwMDAwLCJ1cGRhdGUiOjI0MDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9"
        }
      ]
    },
    {
      "module": "module.sensors",
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "sensor",
      "each": "list",
      "provider": "provider.google",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 6,
          "attributes": {
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/complexity-inc/global/images/sensor",
                    "labels": {},
                    "size": 10,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/complexity-inc/zones/us-east1-c/disks/sensor-0"
              }
            ],
            "can_ip_forward": false,
            "cpu_platform": "Intel Haswell",
            "deletion_protection": false,
            "description": "",
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/complexity-inc/zones/us-east1-c/instances/sensor-0",
            "instance_id": "8159282187644704725",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-micro",
            "metadata": null,
            "metadata_fingerprint": "JHbj21O2wKY=",
            "metadata_startup_script": "      nohup sudo nomad agent -dev -config=/etc/nomad/nomad-server.conf \u003e /tmp/nomad.out 2\u003e /tmp/nomad.err \u0026\n      echo \"nameserver 127.0.0.1\" | sudo tee /etc/resolv.conf\n      sleep 1\n      nohup sudo consul agent \\\n        -server \\\n        -datacenter=sensor-0 \\\n        -bootstrap-expect=1 \\\n        -data-dir=/var/lib/consul \\\n        -node=sensor-0 \\\n        -bind=0.0.0.0 \\\n        -client=0.0.0.0 \\\n        -retry-join-wan=34.74.178.193 \\\n        -advertise-wan=$(curl https://ipinfo.io/ip) \\\n        -config-dir=/etc/consul.d \u003e /tmp/consul.out 2\u003e /tmp/consul.err \u0026\n      sleep 30\n      consul kv put sensor/api_host api.service.gcp.consul\n      consul kv put sensor/version 1.0.0\n      consul kv put sensor/id 0\n      consul kv put sensor/x_start 0\n      consul kv put sensor/y_start 0\n      nomad job run /home/packer/sensor/sensor.nomad\n",
            "min_cpu_platform": "",
            "name": "sensor-0",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "35.227.18.117",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/complexity-inc/global/networks/default",
                "network_ip": "10.142.0.26",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/complexity-inc/regions/us-east1/subnetworks/default",
                "subnetwork_project": "complexity-inc"
              }
            ],
            "project": "complexity-inc",
            "scheduling": [
              {
                "automatic_restart": true,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/complexity-inc/zones/us-east1-c/instances/sensor-0",
            "service_account": [
              {
                "email": "784296748434-compute@developer.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/compute.readonly",
                  "https://www.googleapis.com/auth/devstorage.read_only",
                  "https://www.googleapis.com/auth/userinfo.email"
                ]
              }
            ],
            "shielded_instance_config": [],
            "tags": [
              "orchestrated-complexity"
            ],
            "tags_fingerprint": "5w1A4rUtsMY=",
            "timeouts": null,
            "zone": "us-east1-c"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9"
        },
        {
          "index_key": 1,
          "schema_version": 6,
          "attributes": {
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/complexity-inc/global/images/sensor",
                    "labels": {},
                    "size": 10,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/complexity-inc/zones/us-east1-c/disks/sensor-1"
              }
            ],
            "can_ip_forward": false,
            "cpu_platform": "Intel Haswell",
            "deletion_protection": false,
            "description": "",
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/complexity-inc/zones/us-east1-c/instances/sensor-1",
            "instance_id": "2138168390080796629",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-micro",
            "metadata": null,
            "metadata_fingerprint": "B7XaGENjILQ=",
            "metadata_startup_script": "      nohup sudo nomad agent -dev -config=/etc/nomad/nomad-server.conf \u003e /tmp/nomad.out 2\u003e /tmp/nomad.err \u0026\n      echo \"nameserver 127.0.0.1\" | sudo tee /etc/resolv.conf\n      sleep 1\n      nohup sudo consul agent \\\n        -server \\\n        -datacenter=sensor-1 \\\n        -bootstrap-expect=1 \\\n        -data-dir=/var/lib/consul \\\n        -node=sensor-1 \\\n        -bind=0.0.0.0 \\\n        -client=0.0.0.0 \\\n        -retry-join-wan=34.74.178.193 \\\n        -advertise-wan=$(curl https://ipinfo.io/ip) \\\n        -config-dir=/etc/consul.d \u003e /tmp/consul.out 2\u003e /tmp/consul.err \u0026\n      sleep 30\n      consul kv put sensor/api_host api.service.gcp.consul\n      consul kv put sensor/version 1.0.0\n      consul kv put sensor/id 1\n      consul kv put sensor/x_start 0\n      consul kv put sensor/y_start 0\n      nomad job run /home/packer/sensor/sensor.nomad\n",
            "min_cpu_platform": "",
            "name": "sensor-1",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "34.73.103.20",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/complexity-inc/global/networks/default",
                "network_ip": "10.142.0.25",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/complexity-inc/regions/us-east1/subnetworks/default",
                "subnetwork_project": "complexity-inc"
              }
            ],
            "project": "complexity-inc",
            "scheduling": [
              {
                "automatic_restart": true,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/complexity-inc/zones/us-east1-c/instances/sensor-1",
            "service_account": [
              {
                "email": "784296748434-compute@developer.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/compute.readonly",
                  "https://www.googleapis.com/auth/devstorage.read_only",
                  "https://www.googleapis.com/auth/userinfo.email"
                ]
              }
            ],
            "shielded_instance_config": [],
            "tags": [
              "orchestrated-complexity"
            ],
            "tags_fingerprint": "5w1A4rUtsMY=",
            "timeouts": null,
            "zone": "us-east1-c"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9"
        },
        {
          "index_key": 2,
          "schema_version": 6,
          "attributes": {
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/complexity-inc/global/images/sensor",
                    "labels": {},
                    "size": 10,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/complexity-inc/zones/us-east1-c/disks/sensor-2"
              }
            ],
            "can_ip_forward": false,
            "cpu_platform": "Intel Haswell",
            "deletion_protection": false,
            "description": "",
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/complexity-inc/zones/us-east1-c/instances/sensor-2",
            "instance_id": "3831196218436622293",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-micro",
            "metadata": null,
            "metadata_fingerprint": "taZ0DHiwPhE=",
            "metadata_startup_script": "      nohup sudo nomad agent -dev -config=/etc/nomad/nomad-server.conf \u003e /tmp/nomad.out 2\u003e /tmp/nomad.err \u0026\n      echo \"nameserver 127.0.0.1\" | sudo tee /etc/resolv.conf\n      sleep 1\n      nohup sudo consul agent \\\n        -server \\\n        -datacenter=sensor-2 \\\n        -bootstrap-expect=1 \\\n        -data-dir=/var/lib/consul \\\n        -node=sensor-2 \\\n        -bind=0.0.0.0 \\\n        -client=0.0.0.0 \\\n        -retry-join-wan=34.74.178.193 \\\n        -advertise-wan=$(curl https://ipinfo.io/ip) \\\n        -config-dir=/etc/consul.d \u003e /tmp/consul.out 2\u003e /tmp/consul.err \u0026\n      sleep 30\n      consul kv put sensor/api_host api.service.gcp.consul\n      consul kv put sensor/version 1.0.0\n      consul kv put sensor/id 2\n      consul kv put sensor/x_start 0\n      consul kv put sensor/y_start 0\n      nomad job run /home/packer/sensor/sensor.nomad\n",
            "min_cpu_platform": "",
            "name": "sensor-2",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "35.231.155.140",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/complexity-inc/global/networks/default",
                "network_ip": "10.142.0.27",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/complexity-inc/regions/us-east1/subnetworks/default",
                "subnetwork_project": "complexity-inc"
              }
            ],
            "project": "complexity-inc",
            "scheduling": [
              {
                "automatic_restart": true,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/complexity-inc/zones/us-east1-c/instances/sensor-2",
            "service_account": [
              {
                "email": "784296748434-compute@developer.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/compute.readonly",
                  "https://www.googleapis.com/auth/devstorage.read_only",
                  "https://www.googleapis.com/auth/userinfo.email"
                ]
              }
            ],
            "shielded_instance_config": [],
            "tags": [
              "orchestrated-complexity"
            ],
            "tags_fingerprint": "5w1A4rUtsMY=",
            "timeouts": null,
            "zone": "us-east1-c"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9"
        }
      ]
    },
    {
      "module": "module.gcp",
      "mode": "managed",
      "type": "google_container_cluster",
      "name": "orchestrated_complexity",
      "provider": "provider.google",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "additional_zones": null,
            "addons_config": [
              {
                "horizontal_pod_autoscaling": [],
                "http_load_balancing": [],
                "kubernetes_dashboard": [],
                "network_policy_config": [
                  {
                    "disabled": true
                  }
                ]
              }
            ],
            "authenticator_groups_config": [],
            "cluster_autoscaling": [
              {
                "auto_provisioning_defaults": [],
                "enabled": false,
                "resource_limits": []
              }
            ],
            "cluster_ipv4_cidr": "10.56.0.0/14",
            "default_max_pods_per_node": 110,
            "description": "",
            "enable_binary_authorization": null,
            "enable_intranode_visibility": null,
            "enable_kubernetes_alpha": false,
            "enable_legacy_abac": true,
            "enable_tpu": null,
            "endpoint": "35.231.216.0",
            "id": "projects/complexity-inc/locations/us-east1-c/clusters/orchestrated-complexity",
            "initial_node_count": 1,
            "instance_group_urls": [
              "https://www.googleapis.com/compute/v1/projects/complexity-inc/zones/us-east1-c/instanceGroups/gke-orchestrated-com-orchestrated-com-eee8e25f-grp"
            ],
            "ip_allocation_policy": [],
            "location": "us-east1-c",
            "logging_service": "logging.googleapis.com/kubernetes",
            "maintenance_policy": [],
            "master_auth": [
              {
                "client_certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMyakNDQWNLZ0F3SUJBZ0lRTHNGOEFSM1RYYTZNc2I3QWtuenkyREFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRMll6ZzVOV1ppWlMwMk4yWXlMVFF5TXpFdE9EZzJNUzA1T0RJNU9UWmhPV0U0WkRNdwpIaGNOTWpBd01UQTFNRGd4TXpFNVdoY05NalV3TVRBek1EZ3hNekU1V2pBUk1ROHdEUVlEVlFRREV3WmpiR2xsCmJuUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEQitMQWVWM0FLTmk4QUduRXUKZTdVRmVOVm14ZVo4WmJ5dWRZMFEraWFsUVRua1pQa2x0UTlWcUdDV2IvSFdZZ3NHMm4xMGRLVzJrRFpGMjUydQpwRkh3YWpiWFdURTZDR1ZBam4vNzVqYXBRRW5JbTkwNXNrRXE0Tjdqc2RwSEhvY3NqeGVvdGpvbEJnejhWVTc3CkZaMDZlT3BPeDVuZ1U4elhoTE5mUytvTGpWTEtkbndJRktZODdsMEQ5NTNJcVpHN3VnRjdLaHNwQ1lHbXJGbXoKZGFETCs1Q3FOY2krN2k4Z0FteW1IWEkyRklvdW5UNXlxcmFJUHQ3ZHpvMm1VZVNhZ0F6aUtWRGlTMHFnSmdrbgpTNzhZN1A3MjZCKzNIVkMrbG1mL3JsdzhYZUoxdCtmQlIxbnVFSTRsZE1aVmFpN1dQQWFaaWRiZEc3cmtLaE9YClNMMGxBZ01CQUFHakVEQU9NQXdHQTFVZEV3RUIvd1FDTUFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCTTMKNnAzVGR5R0NOTVBxaFRPTkpLVGlwWmRVS2RGeHJqOUVzdW1sWFVwdi9jNUNNd1gxdVhJMW9yZWJqckJjV2ZmWQo1THd3WFFlcDhpRStKMHNHZWpleVZzaGhWM29yREN3YTZaWTcyZVBRRGtQeGNGZ1ZPNEg4REZVNXRtWkx6RTNZCklkeUU2KzN0UUN4NktpRFFVbWhkdlBGano4NEtmUnduOWROQk5sczU4b1R3ZUtxMjAyR0VMNHJSR3ErRnVpcU4KUnR6WnQ1Q3dQWG9XalpsOGVtdHZvdVF3VU5GbmR4SmtBd0pUdy9RaHVUTzJaT0NOeWVRLy95YUZEc1hURXJoUAp2RlRvWnZ0akVPN2I5dnNQN1FZalJlNUlYalZjaVlvdDZIblZpMENsZm5qd2dPWW5kU1lKSHJFc1V2Y1hSL0I0CnpaYTE5VWh0M0h2TUlOL1JOSDg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                "client_certificate_config": [
                  {
                    "issue_client_certificate": true
                  }
                ],
                "client_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBd2Zpd0hsZHdDall2QUJweExudTFCWGpWWnNYbWZHVzhybldORVBvbXBVRTU1R1Q1CkpiVVBWYWhnbG0veDFtSUxCdHA5ZEhTbHRwQTJSZHVkcnFSUjhHbzIxMWt4T2dobFFJNS8rK1kycVVCSnlKdmQKT2JKQkt1RGU0N0hhUng2SExJOFhxTFk2SlFZTS9GVk8reFdkT25qcVRzZVo0RlBNMTRTelgwdnFDNDFTeW5aOApDQlNtUE81ZEEvZWR5S21SdTdvQmV5b2JLUW1CcHF4WnMzV2d5L3VRcWpYSXZ1NHZJQUpzcGgxeU5oU0tMcDArCmNxcTJpRDdlM2M2TnBsSGttb0FNNGlsUTRrdEtvQ1lKSjB1L0dPeis5dWdmdHgxUXZwWm4vNjVjUEYzaWRiZm4Kd1VkWjdoQ09KWFRHVldvdTFqd0dtWW5XM1J1NjVDb1RsMGk5SlFJREFRQUJBb0lCQUF5Rkp2MEx0aDE2bjRXdQpyei9mQXB3SlQzWkptaXNpWXFUbmQ5cGJneWk4aHBEc1J1YW5yVnlMNHp3aW1xWUtBRjNmWVhuN0E0S1VCQTkxCjhhakcrTXVxQWhpR3JIWkFwTThmYmptNHJpNDJOTzBBSG9ORENHWWlTMURBSWUrSzZXZTNaQmE0T0dybVhUL2cKL203czEyVmhvNklWSVNTejFBVFVqeGdTR0MwZTdtTnRWZW93YWxPRCtMc2ptcGF2RXJLUEhvVndYTHg4MkFhTQpKSjIwQkxXL3RPdndOQWxoMkZMaFo2NHB6THZTQW8yS04vUkNWQVhhNjM2c1dvbW5NWk5TVHAyNy9iSGhxc0dvCmtxa2tWNERNK01HTVlPU1lTZnVVbEdGaXk0Unc0QmJNNWRCTmJoRTdvVUo2Lzc3UmxyZzB5OENJbEVSK3cybmoKOEJqbVJzc0NnWUVBOVI2ZHcvdkM5Ylp5b1drMGlpV2I5M3UxZGJ2WWFrRUdpUTdzc1JyL1FWSFVsNW1YRzExMwpEM3lZa0pSem9xdUlOVE41NmhiWDc0d29OYjh4bG1wM0JUUXpZZTEwYU5rcS94c3pVTkVlZ0ZFSVlKMkVQbHhnCkZPM2d5eFl4czBwbWozQTV1TDZ3c05XVWtvWkZaY3BZMzA2OC91MXFkaFNRaU1TMStobWFVNnNDZ1lFQXlwVGIKUUFVVHpKYnRGbmNXTkVUUk9SOEpYMUxtQ2lOKzQrNjdrRkVzcXVxZWprQ2lFVm5Pa2Iyc3FFMVRMUDVTOEViSgo5STk5QnR3eSsxNGEreXJEejhqOXBVRXZPaUFrTGhGZW43NU1IRTZ3QzU5dVoySHpNTW50ZTdYSXZJOE9jTFJ3CnVMeCtpQ3lheHRxUlNvdkdDMk4vVUozWndSK0JmUHZySGxVRlltOENnWUErMFBESFY4NlhuNER5NG40blpRbjYKTzBhK2ZEd3l4cVZCSElVRndoQm1FZTEwU0ZVVUd6aTJ6RXhneU5wMWRwWDZaRTI2OHMyMXd1cFBFOGRHYjlRKwpqaWtZMEh5RG5odkpzcFBOQXpwWTBldGVyeDlEeC9LTGlvYVFKUWpwbElpQis5V2ZCYWRNT2YvUUtQN0Iza0EyClFmeG5MRHFiTmh2d0lORXQzYi9SN3dLQmdRREpleVZZMWZQc0xrdWRaVkdyS0txaVVqRURJckx5Y0gwNmUyMEcKeXdWTzlFeEFGUjViZldPSzVnZTcyRFFhY3RQUWI4ZGF1ZjlTZkYwa1RtTXRYVW9rOWJUMzBBNEZsSVFIWVhVbwpFWjhuSkVmSk40Y1p3WHliRUtwbXVOVHVYS1d6Q0hOMytOa3IzSmtQbjhDVFVOTG03czFvUTZhWWdocEtVVTkxCituK0Jkd0tCZ0FLSDUwMGgwVTVSdFBDZFh2ZmliT3VneWgwQmlpQ1VxOWhtdko2T1VhMDhEZXEzQktmaEVRKzcKSkRRZE9qdTJLdVRCc2RiN29LNmoyaEdaV2c5YzVRdzVDWDhWLzVGeTNMbmx5Skc1dW00bTFBY0J6ME5GaDZrTQpkWlAyMUZxNlRneXltWUUvWjQ3TDNXVTN4ZnB3WnlxbnR6SlY4dndxeUxoZTNGUEcxYnhSCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
                "cluster_ca_certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURERENDQWZTZ0F3SUJBZ0lSQUlrRzlqR1hGQ3lTL1l4S1g4emtGbTh3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa05tTTRPVFZtWW1VdE5qZG1NaTAwTWpNeExUZzROakV0T1RneU9UazJZVGxoT0dRegpNQjRYRFRJd01ERXdOVEEzTVRNeE9Gb1hEVEkxTURFd016QTRNVE14T0Zvd0x6RXRNQ3NHQTFVRUF4TWtObU00Ck9UVm1ZbVV0TmpkbU1pMDBNak14TFRnNE5qRXRPVGd5T1RrMllUbGhPR1F6TUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBOUFGV2p2Q3BwaE5Fa1hGaW4vYmFvVjZsZmJGbWZxdVhRcWwxM2NTZgoxMWU4OW15ZXF1cFI5dEJ4SUVEZ25YYzNxV0FydXNrN09Ud21nMDlIVngvWTZWY2FkNnE3d0dWTnAvK3JUWGd1CmNYVDNFUjc2aHlpbHhJbVNWSzhHWXplQVR4cmpyNkVJSE0rZjFtWVMrUjc0Y2c1U2l0U0t5WlRIMlVBdko3NzkKNHBGRGNSYnkrNXRHZzM0L2JOdy9Pbjd3VDNxejJNaDUwQ0U5SWtLdTh6eWwzOHlDSng1L3E2WmpKaUx1VWNEWApIcEowb2R3THcza1BLRnI5dVNIRUJVYm92VTRUb0p4ODgrUUdhaVUwcytUK1ptMlBpUmw0S29USm9OSzAvVnVLCktmOSsvd1ZMZmRaRFoyRVc0UnZReGgxYUtjVEE1VUxVUStvK3ZPTHBVcXZ3MndJREFRQUJveU13SVRBT0JnTlYKSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQQpQRWxQeExmaGp3WlBPRjdMc3JMSFVEVXFVNUhtT3FNVzQxSi9STjJDWXRCRktwMit4YXNqMTFXbndDYnNxS3dHCnpSMG9WY3dBS20vbGd5R1M0cVQrMmZjTE9NdmcrdkpIZHA3V0h5SXJ5ZHVTeWVsQUk2Yk5ZdVE0cCtRcU90cGUKNGlPMGdTYTdoaW8vZGhtRzFNTkk3NkMzVkZQUC9zVW0zS0xxNlRPOFJVRjR6Z0ROcWZVUHE2VFUzQUpGMzR4egp5VFh4QUFkc0NULyszZmJ5bzVsWjczeTlxNktoT1RROTdqM2YxMFVGVmJRTE1aZ0xHUDg5UC9kZVlVZEF6T0V0CmxjYWw4QXNzQloyUENvSFVzSW1PZU52dEZsbnd3MEY5bDIxeWVNRHZRVjYwQ2JRYktUTXZiaDIyWSsvdFg5dkYKZDVSTnBtbmYrdzc2c1RYdXJNeCtjQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                "password": "Password1234!12312",
                "username": "kubernetes"
              }
            ],
            "master_authorized_networks_config": [],
            "master_version": "1.13.11-gke.14",
            "min_master_version": null,
            "monitoring_service": "monitoring.googleapis.com/kubernetes",
            "name": "orchestrated-complexity",
            "network": "projects/complexity-inc/global/networks/default",
            "network_policy": [
              {
                "enabled": false,
                "provider": "PROVIDER_UNSPECIFIED"
              }
            ],
            "node_config": [
              {
                "disk_size_gb": 100,
                "disk_type": "pd-standard",
                "guest_accelerator": [],
                "image_type": "COS",
                "labels": {},
                "local_ssd_count": 0,
                "machine_type": "e2-medium",
                "metadata": {
                  "disable-legacy-endpoints": "true"
                },
                "min_cpu_platform": "",
                "oauth_scopes": [
                  "https://www.googleapis.com/auth/devstorage.read_only",
                  "https://www.googleapis.com/auth/logging.write",
                  "https://www.googleapis.com/auth/monitoring"
                ],
                "preemptible": true,
                "sandbox_config": [],
                "service_account": "default",
                "shielded_instance_config": [
                  {
                    "enable_integrity_monitoring": true,
                    "enable_secure_boot": false
                  }
                ],
                "tags": [
                  "orchestrated-complexity"
                ],
                "taint": [],
                "workload_metadata_config": []
              }
            ],
            "node_locations": [],
            "node_pool": [
              {
                "autoscaling": [],
                "initial_node_count": 1,
                "instance_group_urls": [
                  "https://www.googleapis.com/compute/v1/projects/complexity-inc/zones/us-east1-c/instanceGroupManagers/gke-orchestrated-com-orchestrated-com-eee8e25f-grp"
                ],
                "management": [
                  {
                    "auto_repair": false,
                    "auto_upgrade": false
                  }
                ],
                "max_pods_per_node": 0,
                "name": "orchestrated-complexity-nodepool",
                "name_prefix": "",
                "node_config": [
                  {
                    "disk_size_gb": 100,
                    "disk_type": "pd-standard",
                    "guest_accelerator": [],
                    "image_type": "COS",
                    "labels": {},
                    "local_ssd_count": 0,
                    "machine_type": "e2-medium",
                    "metadata": {
                      "disable-legacy-endpoints": "true"
                    },
                    "min_cpu_platform": "",
                    "oauth_scopes": [
                      "https://www.googleapis.com/auth/devstorage.read_only",
                      "https://www.googleapis.com/auth/logging.write",
                      "https://www.googleapis.com/auth/monitoring"
                    ],
                    "preemptible": true,
                    "sandbox_config": [],
                    "service_account": "default",
                    "shielded_instance_config": [
                      {
                        "enable_integrity_monitoring": true,
                        "enable_secure_boot": false
                      }
                    ],
                    "tags": [
                      "orchestrated-complexity"
                    ],
                    "taint": [],
                    "workload_metadata_config": []
                  }
                ],
                "node_count": 1,
                "version": "1.13.11-gke.14"
              }
            ],
            "node_version": "1.13.11-gke.14",
            "pod_security_policy_config": [],
            "private_cluster_config": [],
            "project": "complexity-inc",
            "region": null,
            "remove_default_node_pool": true,
            "resource_labels": {},
            "services_ipv4_cidr": "10.59.240.0/20",
            "subnetwork": "projects/complexity-inc/regions/us-east1/subnetworks/default",
            "timeouts": null,
            "vertical_pod_autoscaling": [],
            "zone": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAwLCJkZWxldGUiOjI0MDAwMDAwMDAwMDAsInVwZGF0ZSI6MzYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9"
        }
      ]
    },
    {
      "module": "module.gcp",
      "mode": "managed",
      "type": "google_container_node_pool",
      "name": "orchestrated_complexity",
      "provider": "provider.google",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "autoscaling": [],
            "cluster": "orchestrated-complexity",
            "id": "projects/complexity-inc/locations/us-east1-c/clusters/orchestrated-complexity/nodePools/orchestrated-complexity-nodepool",
            "initial_node_count": 1,
            "instance_group_urls": [
              "https://www.googleapis.com/compute/v1/projects/complexity-inc/zones/us-east1-c/instanceGroupManagers/gke-orchestrated-com-orchestrated-com-eee8e25f-grp"
            ],
            "location": "us-east1-c",
            "management": [
              {
                "auto_repair": false,
                "auto_upgrade": false
              }
            ],
            "max_pods_per_node": null,
            "name": "orchestrated-complexity-nodepool",
            "name_prefix": "",
            "node_config": [
              {
                "disk_size_gb": 100,
                "disk_type": "pd-standard",
                "guest_accelerator": [],
                "image_type": "COS",
                "labels": {},
                "local_ssd_count": 0,
                "machine_type": "e2-medium",
                "metadata": {
                  "disable-legacy-endpoints": "true"
                },
                "min_cpu_platform": "",
                "oauth_scopes": [
                  "https://www.googleapis.com/auth/devstorage.read_only",
                  "https://www.googleapis.com/auth/logging.write",
                  "https://www.googleapis.com/auth/monitoring"
                ],
                "preemptible": true,
                "sandbox_config": [],
                "service_account": "default",
                "shielded_instance_config": [
                  {
                    "enable_integrity_monitoring": true,
                    "enable_secure_boot": false
                  }
                ],
                "tags": [
                  "orchestrated-complexity"
                ],
                "taint": [],
                "workload_metadata_config": []
              }
            ],
            "node_count": 1,
            "project": "complexity-inc",
            "region": null,
            "timeouts": null,
            "version": "1.13.11-gke.14",
            "zone": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.gcp.google_container_cluster.orchestrated_complexity"
          ]
        }
      ]
    },
    {
      "module": "module.api",
      "mode": "managed",
      "type": "kubernetes_pod",
      "name": "api_1_0_0",
      "provider": "provider.kubernetes",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "default/api-1-0-0",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "app": "api-1-0-0"
                },
                "name": "api-1-0-0",
                "namespace": "default",
                "resource_version": "5957",
                "self_link": "/api/v1/namespaces/default/pods/api-1-0-0",
                "uid": "ed356184-2f96-11ea-bd02-42010a8e00ed"
              }
            ],
            "spec": [
              {
                "active_deadline_seconds": 0,
                "affinity": [],
                "automount_service_account_token": false,
                "container": [
                  {
                    "args": [],
                    "command": [],
                    "env": [
                      {
                        "name": "version",
                        "value": "1.0.0",
                        "value_from": []
                      },
                      {
                        "name": "consulHost",
                        "value": "consul.service.gcp.consul",
                        "value_from": []
                      }
                    ],
                    "env_from": [],
                    "image": "gcr.io/complexity-inc/api:latest",
                    "image_pull_policy": "Always",
                    "lifecycle": [],
                    "liveness_probe": [],
                    "name": "api-1-0-0",
                    "port": [
                      {
                        "container_port": 80,
                        "host_ip": "",
                        "host_port": 0,
                        "name": "http",
                        "protocol": "TCP"
                      }
                    ],
                    "readiness_probe": [],
                    "resources": [
                      {
                        "limits": [],
                        "requests": [
                          {
                            "cpu": "100m",
                            "memory": ""
                          }
                        ]
                      }
                    ],
                    "security_context": [],
                    "stdin": false,
                    "stdin_once": false,
                    "termination_message_path": "/dev/termination-log",
                    "tty": false,
                    "volume_mount": [],
                    "working_dir": ""
                  }
                ],
                "dns_config": [],
                "dns_policy": "ClusterFirst",
                "host_aliases": [],
                "host_ipc": false,
                "host_network": false,
                "host_pid": false,
                "hostname": "",
                "image_pull_secrets": [],
                "init_container": [],
                "node_name": "gke-orchestrated-com-orchestrated-com-eee8e25f-5ttr",
                "node_selector": {},
                "priority_class_name": "",
                "restart_policy": "Always",
                "security_context": [],
                "service_account_name": "default",
                "share_process_namespace": false,
                "subdomain": "",
                "termination_grace_period_seconds": 30,
                "toleration": [],
                "volume": []
              }
            ],
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.gcp.google_container_cluster.orchestrated_complexity"
          ]
        }
      ]
    },
    {
      "module": "module.api",
      "mode": "managed",
      "type": "kubernetes_pod",
      "name": "api_1_0_1",
      "provider": "provider.kubernetes",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "default/api-1-0-1",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "app": "api-1-0-1"
                },
                "name": "api-1-0-1",
                "namespace": "default",
                "resource_version": "5959",
                "self_link": "/api/v1/namespaces/default/pods/api-1-0-1",
                "uid": "ed37749c-2f96-11ea-bd02-42010a8e00ed"
              }
            ],
            "spec": [
              {
                "active_deadline_seconds": 0,
                "affinity": [],
                "automount_service_account_token": false,
                "container": [
                  {
                    "args": [],
                    "command": [],
                    "env": [
                      {
                        "name": "version",
                        "value": "1.0.1",
                        "value_from": []
                      },
                      {
                        "name": "consulHost",
                        "value": "consul.service.gcp.consul",
                        "value_from": []
                      }
                    ],
                    "env_from": [],
                    "image": "gcr.io/complexity-inc/api:latest",
                    "image_pull_policy": "Always",
                    "lifecycle": [],
                    "liveness_probe": [],
                    "name": "api-1-0-1",
                    "port": [
                      {
                        "container_port": 80,
                        "host_ip": "",
                        "host_port": 0,
                        "name": "http",
                        "protocol": "TCP"
                      }
                    ],
                    "readiness_probe": [],
                    "resources": [
                      {
                        "limits": [],
                        "requests": [
                          {
                            "cpu": "100m",
                            "memory": ""
                          }
                        ]
                      }
                    ],
                    "security_context": [],
                    "stdin": false,
                    "stdin_once": false,
                    "termination_message_path": "/dev/termination-log",
                    "tty": false,
                    "volume_mount": [],
                    "working_dir": ""
                  }
                ],
                "dns_config": [],
                "dns_policy": "ClusterFirst",
                "host_aliases": [],
                "host_ipc": false,
                "host_network": false,
                "host_pid": false,
                "hostname": "",
                "image_pull_secrets": [],
                "init_container": [],
                "node_name": "gke-orchestrated-com-orchestrated-com-eee8e25f-5ttr",
                "node_selector": {},
                "priority_class_name": "",
                "restart_policy": "Always",
                "security_context": [],
                "service_account_name": "default",
                "share_process_namespace": false,
                "subdomain": "",
                "termination_grace_period_seconds": 30,
                "toleration": [],
                "volume": []
              }
            ],
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.gcp.google_container_cluster.orchestrated_complexity"
          ]
        }
      ]
    },
    {
      "module": "module.web",
      "mode": "managed",
      "type": "kubernetes_pod",
      "name": "web",
      "provider": "provider.kubernetes",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "default/web",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "app": "web"
                },
                "name": "web",
                "namespace": "default",
                "resource_version": "12314",
                "self_link": "/api/v1/namespaces/default/pods/web",
                "uid": "726f30ff-2f9b-11ea-bd02-42010a8e00ed"
              }
            ],
            "spec": [
              {
                "active_deadline_seconds": 0,
                "affinity": [],
                "automount_service_account_token": false,
                "container": [
                  {
                    "args": [],
                    "command": [],
                    "env": [
                      {
                        "name": "apiHost",
                        "value": "api.service.gcp.consul",
                        "value_from": []
                      }
                    ],
                    "env_from": [],
                    "image": "gcr.io/complexity-inc/web:latest",
                    "image_pull_policy": "Always",
                    "lifecycle": [],
                    "liveness_probe": [],
                    "name": "web",
                    "port": [
                      {
                        "container_port": 80,
                        "host_ip": "",
                        "host_port": 0,
                        "name": "http",
                        "protocol": "TCP"
                      }
                    ],
                    "readiness_probe": [],
                    "resources": [
                      {
                        "limits": [],
                        "requests": [
                          {
                            "cpu": "100m",
                            "memory": ""
                          }
                        ]
                      }
                    ],
                    "security_context": [],
                    "stdin": false,
                    "stdin_once": false,
                    "termination_message_path": "/dev/termination-log",
                    "tty": false,
                    "volume_mount": [],
                    "working_dir": ""
                  }
                ],
                "dns_config": [],
                "dns_policy": "ClusterFirst",
                "host_aliases": [],
                "host_ipc": false,
                "host_network": false,
                "host_pid": false,
                "hostname": "",
                "image_pull_secrets": [],
                "init_container": [],
                "node_name": "gke-orchestrated-com-orchestrated-com-eee8e25f-5ttr",
                "node_selector": {},
                "priority_class_name": "",
                "restart_policy": "Always",
                "security_context": [],
                "service_account_name": "default",
                "share_process_namespace": false,
                "subdomain": "",
                "termination_grace_period_seconds": 30,
                "toleration": [],
                "volume": []
              }
            ],
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.gcp.google_container_cluster.orchestrated_complexity"
          ]
        }
      ]
    },
    {
      "module": "module.api",
      "mode": "managed",
      "type": "kubernetes_service",
      "name": "api_svc_1_0_0",
      "provider": "provider.kubernetes",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "default/api-1-0-0-svc",
            "load_balancer_ingress": [],
            "metadata": [
              {
                "annotations": {
                  "consul.hashicorp.com/service-name": "api",
                  "consul.hashicorp.com/service-tags": "1.0.0"
                },
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "api-1-0-0-svc",
                "namespace": "default",
                "resource_version": "1197",
                "self_link": "/api/v1/namespaces/default/services/api-1-0-0-svc",
                "uid": "f8899b11-2f93-11ea-bd02-42010a8e00ed"
              }
            ],
            "spec": [
              {
                "cluster_ip": "10.59.240.72",
                "external_ips": [],
                "external_name": "",
                "external_traffic_policy": "",
                "load_balancer_ip": "",
                "load_balancer_source_ranges": [],
                "port": [
                  {
                    "name": "",
                    "node_port": 0,
                    "port": 80,
                    "protocol": "TCP",
                    "target_port": "80"
                  }
                ],
                "publish_not_ready_addresses": false,
                "selector": {
                  "app": "api-1-0-0"
                },
                "session_affinity": "None",
                "type": "ClusterIP"
              }
            ],
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.gcp.google_container_cluster.orchestrated_complexity"
          ]
        }
      ]
    },
    {
      "module": "module.api",
      "mode": "managed",
      "type": "kubernetes_service",
      "name": "api_svc_1_0_1",
      "provider": "provider.kubernetes",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "default/api-svc-1-0-1",
            "load_balancer_ingress": [],
            "metadata": [
              {
                "annotations": {
                  "consul.hashicorp.com/service-name": "api",
                  "consul.hashicorp.com/service-tags": "1.0.1"
                },
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "api-svc-1-0-1",
                "namespace": "default",
                "resource_version": "1208",
                "self_link": "/api/v1/namespaces/default/services/api-svc-1-0-1",
                "uid": "f89307d5-2f93-11ea-bd02-42010a8e00ed"
              }
            ],
            "spec": [
              {
                "cluster_ip": "10.59.251.216",
                "external_ips": [],
                "external_name": "",
                "external_traffic_policy": "",
                "load_balancer_ip": "",
                "load_balancer_source_ranges": [],
                "port": [
                  {
                    "name": "",
                    "node_port": 0,
                    "port": 80,
                    "protocol": "TCP",
                    "target_port": "80"
                  }
                ],
                "publish_not_ready_addresses": false,
                "selector": {
                  "app": "api-1-0-1"
                },
                "session_affinity": "None",
                "type": "ClusterIP"
              }
            ],
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.gcp.google_container_cluster.orchestrated_complexity"
          ]
        }
      ]
    },
    {
      "module": "module.web",
      "mode": "managed",
      "type": "kubernetes_service",
      "name": "web",
      "provider": "provider.kubernetes",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "default/web-svc",
            "load_balancer_ingress": [
              {
                "hostname": "",
                "ip": "34.73.65.245"
              }
            ],
            "metadata": [
              {
                "annotations": {
                  "consul.hashicorp.com/service-name": "web",
                  "consul.hashicorp.com/service-tags": "1.0.0"
                },
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "web-svc",
                "namespace": "default",
                "resource_version": "12373",
                "self_link": "/api/v1/namespaces/default/services/web-svc",
                "uid": "726b56f2-2f9b-11ea-bd02-42010a8e00ed"
              }
            ],
            "spec": [
              {
                "cluster_ip": "10.59.251.134",
                "external_ips": [],
                "external_name": "",
                "external_traffic_policy": "Cluster",
                "load_balancer_ip": "",
                "load_balancer_source_ranges": [],
                "port": [
                  {
                    "name": "",
                    "node_port": 30443,
                    "port": 80,
                    "protocol": "TCP",
                    "target_port": "80"
                  }
                ],
                "publish_not_ready_addresses": false,
                "selector": {
                  "app": "web"
                },
                "session_affinity": "None",
                "type": "LoadBalancer"
              }
            ],
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.gcp.google_container_cluster.orchestrated_complexity"
          ]
        }
      ]
    },
    {
      "module": "module.gcp",
      "mode": "managed",
      "type": "null_resource",
      "name": "kubectl",
      "provider": "provider.null",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "1995350523241304529",
            "triggers": {
              "cluster": "projects/complexity-inc/locations/us-east1-c/clusters/orchestrated-complexity"
            }
          },
          "dependencies": [
            "module.gcp.google_container_cluster.orchestrated_complexity"
          ]
        }
      ]
    },
    {
      "module": "module.consul",
      "mode": "managed",
      "type": "null_resource",
      "name": "kubectl",
      "provider": "provider.null",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "3033754648088387017",
            "triggers": {
              "cluster": "1995350523241304529"
            }
          },
          "dependencies": [
            "module.gcp.google_container_cluster.orchestrated_complexity",
            "module.gcp.null_resource.kubectl"
          ]
        }
      ]
    }
  ]
}
